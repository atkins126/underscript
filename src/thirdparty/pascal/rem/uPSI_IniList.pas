unit uPSI_IniList;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_IniList = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TIniList(CL: TPSPascalCompiler);
procedure SIRegister_IniList(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TIniList(CL: TPSRuntimeClassImporter);
procedure RIRegister_IniList(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   IniList
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_IniList]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TIniList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TIniList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TIniList') do
  begin
    RegisterProperty('FLines', 'TStringList', iptrw);
    RegisterMethod('Constructor Create');
    RegisterProperty('CaseSensitive', 'boolean', iptrw);
    RegisterMethod('Procedure Clear');
    RegisterProperty('DateTimeAsFloat', 'boolean', iptrw);
    RegisterProperty('IniFilename', 'string', iptrw);
    RegisterProperty('Separator', 'char', iptrw);
    RegisterProperty('Title', 'string', iptrw);
    RegisterMethod('Procedure Assign( Source : TIniList)');
    RegisterMethod('Procedure CopyFrom( Source : TIniList; const Section : string)');
    RegisterMethod('Function LoadFromFile : boolean;');
    RegisterMethod('Function LoadFromArchive( const FileName : string) : boolean;');
    RegisterMethod('Function LoadFromFile : boolean');
    RegisterMethod('Function LoadFromStream( AStream : TStream) : boolean');
    RegisterMethod('Procedure LoadFromStrings( AStrings : TStrings)');
    RegisterMethod('Function SaveToArchive : boolean;');
    RegisterMethod('Function SaveToArchive( const FileName : string) : boolean;');
    RegisterMethod('Function SaveToFile : boolean');
    RegisterMethod('Function SaveToStream( AStream : TStream) : boolean');
    RegisterMethod('Procedure SaveToStrings( AStrings : TStrings)');
    RegisterMethod('Procedure DeleteKey( const Section, Key : String)');
    RegisterMethod('Procedure EraseSection( const Section : string)');
    RegisterMethod('Function KeyCount( const Section : string) : integer');
    RegisterMethod('Function KeyExists( const Section, Key : string) : boolean');
    RegisterMethod('Function SectionCount : integer');
    RegisterMethod('Function SectionExists( const Section : string) : boolean');
    RegisterMethod('Function ValueExists( const Section, Value : string) : boolean');
    RegisterMethod('Function ReadBool( const Section, Key : string; Default : Boolean) : Boolean');
    RegisterMethod('Function ReadDate( const Section, Key : string; Default : TDateTime) : TDateTime');
    RegisterMethod('Function ReadDateTime( const Section, Key : string; Default : TDateTime) : TDateTime');
    RegisterMethod('Function ReadFloat( const Section, Key : string; Default : Double) : Double');
    RegisterMethod('Function ReadInteger( const Section, Key : string; Default : Longint) : Longint');
    RegisterMethod('Function ReadString( const Section, Key, Default : string) : string');
    RegisterMethod('Function ReadTime( const Section, Key : string; Default : TDateTime) : TDateTime');
    RegisterMethod('Procedure ReadSection( const Section : string; AStrings : TStrings)');
    RegisterMethod('Procedure ReadSections( AStrings : TStrings)');
    RegisterMethod('Procedure ReadSectionKeys( const Section : string; AStrings : TStrings)');
    RegisterMethod('Procedure ReadSectionValues( const Section : string; AStrings : TStrings)');
    RegisterMethod('Procedure WriteBool( const Section, Key : string; Value : Boolean)');
    RegisterMethod('Procedure WriteDate( const Section, Key : string; Value : TDateTime)');
    RegisterMethod('Procedure WriteDateTime( const Section, Key : string; Value : TDateTime)');
    RegisterMethod('Procedure WriteFloat( const Section, Key : string; Value : Double)');
    RegisterMethod('Procedure WriteInteger( const Section, Key : string; Value : Longint)');
    RegisterMethod('Procedure WriteString( const Section, Key, Value : String)');
    RegisterMethod('Procedure WriteTime( const Section, Key : string; Value : TDateTime)');
    RegisterMethod('Procedure WriteSection( const Section : string; AStrings : TStrings)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IniList(CL: TPSPascalCompiler);
begin
  SIRegister_TIniList(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TIniListSaveToArchive_P(Self: TIniList;  const FileName : string) : boolean;
Begin Result := Self.SaveToFile(FileName); END;

(*----------------------------------------------------------------------------*)
Function TIniListSaveToArchive_P(Self: TIniList) : boolean;
Begin Result := Self.SaveToFile; END;

(*----------------------------------------------------------------------------*)
Function TIniListLoadFromArchive_P(Self: TIniList;  const FileName : string) : boolean;
Begin Result := Self.LoadFromFile(FileName); END;

(*----------------------------------------------------------------------------*)
Function TIniListLoadFromFile_P(Self: TIniList) : boolean;
Begin Result := Self.LoadFromFile; END;

(*----------------------------------------------------------------------------*)
procedure TIniListTitle_W(Self: TIniList; const T: string);
begin Self.Title := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListTitle_R(Self: TIniList; var T: string);
begin T := Self.Title; end;

(*----------------------------------------------------------------------------*)
procedure TIniListSeparator_W(Self: TIniList; const T: char);
begin Self.Separator := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListSeparator_R(Self: TIniList; var T: char);
begin T := Self.Separator; end;

(*----------------------------------------------------------------------------*)
procedure TIniListIniFilename_W(Self: TIniList; const T: string);
begin Self.IniFilename := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListIniFilename_R(Self: TIniList; var T: string);
begin T := Self.IniFilename; end;

(*----------------------------------------------------------------------------*)
procedure TIniListDateTimeAsFloat_W(Self: TIniList; const T: boolean);
begin Self.DateTimeAsFloat := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListDateTimeAsFloat_R(Self: TIniList; var T: boolean);
begin T := Self.DateTimeAsFloat; end;

(*----------------------------------------------------------------------------*)
procedure TIniListCaseSensitive_W(Self: TIniList; const T: boolean);
begin Self.CaseSensitive := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListCaseSensitive_R(Self: TIniList; var T: boolean);
begin T := Self.CaseSensitive; end;

(*----------------------------------------------------------------------------*)
procedure TIniListFLines_W(Self: TIniList; const T: TStringList);
Begin Self.FLines := T; end;

(*----------------------------------------------------------------------------*)
procedure TIniListFLines_R(Self: TIniList; var T: TStringList);
Begin T := Self.FLines; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TIniList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TIniList) do
  begin
    RegisterPropertyHelper(@TIniListFLines_R,@TIniListFLines_W,'FLines');
    RegisterConstructor(@TIniList.Create, 'Create');
    RegisterPropertyHelper(@TIniListCaseSensitive_R,@TIniListCaseSensitive_W,'CaseSensitive');
    RegisterMethod(@TIniList.Clear, 'Clear');
    RegisterPropertyHelper(@TIniListDateTimeAsFloat_R,@TIniListDateTimeAsFloat_W,'DateTimeAsFloat');
    RegisterPropertyHelper(@TIniListIniFilename_R,@TIniListIniFilename_W,'IniFilename');
    RegisterPropertyHelper(@TIniListSeparator_R,@TIniListSeparator_W,'Separator');
    RegisterPropertyHelper(@TIniListTitle_R,@TIniListTitle_W,'Title');
    RegisterMethod(@TIniList.Assign, 'Assign');
    RegisterMethod(@TIniList.CopyFrom, 'CopyFrom');
    RegisterMethod(@TIniListLoadFromFile_P, 'LoadFromFile');
    RegisterMethod(@TIniListLoadFromArchive_P, 'LoadFromArchive');
    RegisterMethod(@TIniList.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TIniList.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TIniList.LoadFromStrings, 'LoadFromStrings');
    RegisterMethod(@TIniListSaveToArchive_P, 'SaveToArchive');
    RegisterMethod(@TIniListSaveToArchive_P, 'SaveToArchive');
    RegisterMethod(@TIniList.SaveToFile, 'SaveToFile');
    RegisterMethod(@TIniList.SaveToStream, 'SaveToStream');
    RegisterMethod(@TIniList.SaveToStrings, 'SaveToStrings');
    RegisterMethod(@TIniList.DeleteKey, 'DeleteKey');
    RegisterMethod(@TIniList.EraseSection, 'EraseSection');
    RegisterMethod(@TIniList.KeyCount, 'KeyCount');
    RegisterMethod(@TIniList.KeyExists, 'KeyExists');
    RegisterMethod(@TIniList.SectionCount, 'SectionCount');
    RegisterMethod(@TIniList.SectionExists, 'SectionExists');
    RegisterMethod(@TIniList.ValueExists, 'ValueExists');
    RegisterMethod(@TIniList.ReadBool, 'ReadBool');
    RegisterMethod(@TIniList.ReadDate, 'ReadDate');
    RegisterMethod(@TIniList.ReadDateTime, 'ReadDateTime');
    RegisterMethod(@TIniList.ReadFloat, 'ReadFloat');
    RegisterMethod(@TIniList.ReadInteger, 'ReadInteger');
    RegisterMethod(@TIniList.ReadString, 'ReadString');
    RegisterMethod(@TIniList.ReadTime, 'ReadTime');
    RegisterMethod(@TIniList.ReadSection, 'ReadSection');
    RegisterMethod(@TIniList.ReadSections, 'ReadSections');
    RegisterMethod(@TIniList.ReadSectionKeys, 'ReadSectionKeys');
    RegisterMethod(@TIniList.ReadSectionValues, 'ReadSectionValues');
    RegisterMethod(@TIniList.WriteBool, 'WriteBool');
    RegisterMethod(@TIniList.WriteDate, 'WriteDate');
    RegisterMethod(@TIniList.WriteDateTime, 'WriteDateTime');
    RegisterMethod(@TIniList.WriteFloat, 'WriteFloat');
    RegisterMethod(@TIniList.WriteInteger, 'WriteInteger');
    RegisterMethod(@TIniList.WriteString, 'WriteString');
    RegisterMethod(@TIniList.WriteTime, 'WriteTime');
    RegisterMethod(@TIniList.WriteSection, 'WriteSection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_IniList(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TIniList(CL);
end;

 
 
{ TPSImport_IniList }
(*----------------------------------------------------------------------------*)
procedure TPSImport_IniList.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_IniList(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_IniList.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_IniList(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
