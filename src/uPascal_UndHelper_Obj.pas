unit uPascal_UndHelper_Obj;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_UndHelper_Obj = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TUndHelper(CL: TPSPascalCompiler);
procedure SIRegister_UndHelper_Obj(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TUndHelper(CL: TPSRuntimeClassImporter);
procedure RIRegister_UndHelper_Obj(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Lua
  ,pLua
  ,Variants
  ,UndHelper_Obj
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_UndHelper_Obj]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TUndHelper(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TUndHelper') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TUndHelper') do
  begin
    RegisterProperty('LuaState', 'PLua_State', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Write( s : WideString)');
    RegisterMethod('Procedure WriteLn( s : WideString)');
    RegisterMethod('Procedure Run( s : String)');
    RegisterMethod('Function GetG( valName : String) : Variant');
    RegisterMethod('Procedure SetG( valName : String; const AValue : Variant)');
    RegisterMethod('Function GetL( valName : String) : Variant');
    RegisterMethod('Procedure SetL( valName : String; const AValue : Variant)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_UndHelper_Obj(CL: TPSPascalCompiler);
begin
  SIRegister_TUndHelper(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TUndHelperLuaState_W(Self: TUndHelper; const T: PLua_State);
Begin Self.LuaState := T; end;

(*----------------------------------------------------------------------------*)
procedure TUndHelperLuaState_R(Self: TUndHelper; var T: PLua_State);
Begin T := Self.LuaState; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUndHelper(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUndHelper) do
  begin
    RegisterPropertyHelper(@TUndHelperLuaState_R,@TUndHelperLuaState_W,'LuaState');
    RegisterConstructor(@TUndHelper.Create, 'Create');
    RegisterMethod(@TUndHelper.Write, 'Write');
    RegisterMethod(@TUndHelper.WriteLn, 'WriteLn');
    RegisterMethod(@TUndHelper.Run, 'Run');
    RegisterMethod(@TUndHelper.GetL, 'GetL');
    RegisterMethod(@TUndHelper.SetL, 'SetL');
    RegisterMethod(@TUndHelper.GetG, 'GetG');
    RegisterMethod(@TUndHelper.SetG, 'SetG');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_UndHelper_Obj(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TUndHelper(CL);
end;

 
 
{ TPSImport_UndHelper_Obj }
(*----------------------------------------------------------------------------*)
procedure TPSImport_UndHelper_Obj.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_UndHelper_Obj(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_UndHelper_Obj.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_UndHelper_Obj(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
